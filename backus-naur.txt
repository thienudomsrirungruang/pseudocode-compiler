; Written in EBNF (Extended Backus-Naur Form)

<program> ::= <scope>
<scope> ::= {<statement>}
<statement> ::= <output-statement> [<comment>] <newline>
              | <declare-variable-statement> [<comment>] <newline>
              | <assign-variable-statement> [<comment>] <newline>
              | [<comment>] <newline>
<outputstatement> ::= "OUTPUT " <logical-or-exp>
<declare-variable-statement> ::= "DECLARE" <identifier> ":" <datatype>
<assign-variable-statement> ::= <identifier> "‚Üê" <logical-or-exp>
<logical-or-exp> ::= <logical-and-exp> { "||" <logical-and-exp}
<logical-and-exp> ::= <equality-exp> { "&&" <equality-exp> }
<equality-exp> ::= <relational-exp> { "<>" | "=" <relational-exp> }
<relational-exp> ::= <additive-exp> { "<" | ">" | "<=" | ">=" <additive-exp> }
<additive-exp> ::= <term> {"+"|"-"  <term>}
<term> ::= <factor> {"*"|"/"|"MOD"|"DIV"  <factor>}
<factor> ::= "(" <logical-or-exp> ")"
           | <unaryop> <factor>
           | <literal>
<newline> ::= "\n"
<literal> ::= "(0-9)+"
            | "(0-9)+\.{0.9}"
            | '.'
            | TRUE
            | FALSE
            | ".*"
<datatype> ::= "INTEGER" | "STRING" | "REAL" | "BOOLEAN" | "CHAR"
<identifier> ::= {".*"}
<comment> ::= "//(.*+)"
<unaryop> ::= "-" | "+"
